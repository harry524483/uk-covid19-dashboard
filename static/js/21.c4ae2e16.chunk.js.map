{"version":3,"sources":["utils/formatDate.ts","components/Stats.tsx","utils/formatNumber.ts"],"names":["formatDate","date","moment","format","Stats","data","metadata","statsInfo","name","colorClass","value","totalCases","newCases","latestDeaths","deaths","props","useSprings","length","map","from","trail","useTrail","transform","opacity","config","mass","tension","friction","p","style","lastUpdatedAt","className","index","key","div","interpolate","val","toLocaleString","formatNumber","Math","floor"],"mappings":"8KAIeA,EAFI,SAACC,GAAD,OAAkBC,IAAOD,GAAME,OAAO,uBCuE1CC,UAnED,SAAC,GAAkC,IAAD,IAA/BC,KAAQA,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,SACvBC,EAAY,CAChB,CACEC,KAAM,cACNC,WAAY,aACZC,MAAOL,EAAKM,WAAWD,OAEzB,CACEF,KAAM,cACNC,WAAY,cACZC,MAAOL,EAAKO,SAASF,OAEvB,CACEF,KAAM,eACNC,WAAY,YACZC,MAAOL,EAAKQ,aAAaH,OAE3B,CACEF,KAAM,eACNC,WAAY,eACZC,MAAOL,EAAKS,OAAOJ,QAIjBK,EAAQC,YACZT,EAAUU,OACVV,EAAUW,KAAI,kBAAkC,CAC9CC,KAAM,CAAET,MAAO,GACfA,MAFY,EAAGA,MAGfD,WAHY,EAAUA,WAItBD,KAJY,EAAsBA,UAQhCY,EAAQC,YAAS,EAAG,CACxBF,KAAM,CAAEG,UAAW,0BAA2BC,QAAS,GACvDD,UAAW,yBACXC,QAAS,EACTC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAMC,SAAU,OAG9C,OACE,oCACE,kBAAC,IAASC,EAAV,CAAYC,MAAOT,EAAM,IAAzB,mBACmBpB,EAAWM,EAASwB,gBAEvC,yBAAKC,UAAU,mBACZhB,EAAMG,KAAI,WAA8Bc,GAA9B,IAAGtB,EAAH,EAAGA,MAAOD,EAAV,EAAUA,WAAYD,EAAtB,EAAsBA,KAAtB,OACT,yBACEuB,UAAS,+BAA0BtB,EAAWC,OAC9CuB,IAAKD,GAEL,kBAAC,IAASJ,EAAV,CAAYG,UAAU,cAAcF,MAAOT,EAAMY,EAAQ,IACtDxB,EAAKE,OAER,kBAAC,IAASwB,IAAV,CAAcH,UAAU,cAAcF,MAAOT,EAAMY,EAAQ,IACxDtB,EAAMyB,aAAY,SAACC,GAAD,OC9DlB,SAAC1B,GAAD,OAAmBA,EAAM2B,iBD+DxBC,CAAaC,KAAKC,MAAMJ","file":"static/js/21.c4ae2e16.chunk.js","sourcesContent":["import moment from 'moment';\n\nconst formatDate = (date: string) => moment(date).format('Do MMM YY HH:mm:ss');\n\nexport default formatDate;\n","import React from 'react';\nimport { animated, useSprings, useTrail } from 'react-spring';\n\nimport formatNumber from '../utils/formatNumber';\nimport formatDate from '../utils/formatDate';\n\nconst Stats = ({ data: { data, metadata } }) => {\n  const statsInfo = [\n    {\n      name: 'Total Cases',\n      colorClass: 'color-blue',\n      value: data.totalCases.value,\n    },\n    {\n      name: 'Daily Cases',\n      colorClass: 'color-brown',\n      value: data.newCases.value,\n    },\n    {\n      name: 'Daily Deaths',\n      colorClass: 'color-red',\n      value: data.latestDeaths.value,\n    },\n    {\n      name: 'Total Deaths',\n      colorClass: 'color-orange',\n      value: data.deaths.value,\n    },\n  ];\n\n  const props = useSprings(\n    statsInfo.length,\n    statsInfo.map(({ value, colorClass, name }) => ({\n      from: { value: 0 },\n      value,\n      colorClass,\n      name,\n    }))\n  ) as any;\n\n  const trail = useTrail(5, {\n    from: { transform: 'translate3d(0, 30px, 0)', opacity: 0 },\n    transform: 'translate3d(0, 0px, 0)',\n    opacity: 1,\n    config: { mass: 1, tension: 2000, friction: 200 },\n  });\n\n  return (\n    <>\n      <animated.p style={trail[0]}>\n        Last updated on {formatDate(metadata.lastUpdatedAt)}\n      </animated.p>\n      <div className=\"stats-container\">\n        {props.map(({ value, colorClass, name }, index: number) => (\n          <div\n            className={`stats-container-item ${colorClass.value}`}\n            key={index}\n          >\n            <animated.p className=\"stats-label\" style={trail[index + 1]}>\n              {name.value}\n            </animated.p>\n            <animated.div className=\"stats-value\" style={trail[index + 1]}>\n              {value.interpolate((val: number) =>\n                formatNumber(Math.floor(val))\n              )}\n            </animated.div>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Stats;\n","export default (value: number) => value.toLocaleString();\n"],"sourceRoot":""}