{"version":3,"sources":["utils/fetcher.ts","components/Dashboard.tsx","constants/DateRange.ts"],"names":["httpClient","axios","create","baseURL","process","fetcher","url","a","get","response","data","GeoChart","lazy","GeoLegend","FilterButtonGroup","PeopleHospitalised","DailyHospitalAdmissions","VentilatorBeds","Stats","NewCasesChart","DailyDeathsChart","Column","Grid","Row","Dashboard","useState","DateRange","OneMonth","chartDateRange","setChartDateRange","dashboardData","useSWR","revalidateOnFocus","suspense","trail","useTrail","from","transform","opacity","config","mass","tension","friction","className","centered","mobile","tablet","computer","fallback","overview","div","style","hospital_admissions","people_hospitalised","ventilator_beds","h2","minHeight","regional_total_cases","newCases","new_cases","dateRange","onDateRangeChange"],"mappings":"iKAEMA,E,OAAaC,EAAMC,OAAO,CAC9BC,QAASC,gEAGLC,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACSP,EAAWQ,IAAIF,GADxB,cACRG,EADQ,yBAGPA,EAASC,MAHF,2CAAH,sDAMEL,O,gHCFTM,G,OAAWC,gBAAK,kBAAM,iEACtBC,EAAYD,gBAAK,kBAAM,wDACvBE,EAAoBF,gBAAK,kBAAM,yDAC/BG,EAAqBH,gBAAK,kBAAM,kCAChCI,EAA0BJ,gBAAK,kBAAM,kCACrCK,EAAiBL,gBAAK,kBAAM,kCAC5BM,EAAQN,gBAAK,kBAAM,wDACnBO,EAAgBP,gBAAK,kBAAM,wDAC3BQ,EAAmBR,gBAAK,kBAAM,wDAE5BS,EAAgBC,IAAhBD,OAAQE,EAAQD,IAARC,IA6FDC,UA3FG,WAAO,IAAD,EACsBC,mBAASC,IAAUC,UADzC,mBACfC,EADe,KACCC,EADD,KAGRC,EAAkBC,YAAO,aAAc1B,IAAS,CAC5D2B,mBAAmB,EACnBC,UAAU,IAFJvB,KAKFwB,EAAQC,YAAS,EAAG,CACxBC,KAAM,CAAEC,UAAW,0BAA2BC,QAAS,GACvDD,UAAW,yBACXC,QAAS,EACTC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAMC,SAAU,OAG9C,OACE,oCACE,yBAAKC,UAAU,UAAf,wBACA,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CAAMC,UAAQ,GACZ,kBAACrB,EAAD,KACE,kBAACF,EAAD,CAAQwB,OAAQ,GAAIC,OAAQ,EAAGC,SAAU,GACvC,kBAAC,WAAD,CAAUC,SAAU,+BAClB,kBAAC9B,EAAD,CAAOR,KAAMoB,EAAcmB,YAE7B,kBAAC,WAAD,CAAUD,SAAU,+BAClB,kBAAC,IAASE,IAAV,CAAcC,MAAOjB,EAAM,IACzB,kBAAClB,EAAD,CACEN,KAAMoB,EAAcsB,wBAI1B,kBAAC,WAAD,CAAUJ,SAAU,+BAClB,kBAAC,IAASE,IAAV,CAAcC,MAAOjB,EAAM,IACzB,kBAACnB,EAAD,CACEL,KAAMoB,EAAcuB,wBAI1B,kBAAC,WAAD,CAAUL,SAAU,+BAClB,kBAAC,IAASE,IAAV,CAAcC,MAAOjB,EAAM,IACzB,kBAACjB,EAAD,CAAgBP,KAAMoB,EAAcwB,qBAI1C,kBAACjC,EAAD,CAAQwB,OAAQ,GAAIC,OAAQ,EAAGC,SAAU,GACvC,kBAAC,IAASQ,GAAV,CAAaZ,UAAU,YAAYQ,MAAOjB,EAAM,IAAhD,UAGA,kBAAC,WAAD,CAAUc,SAAU,yBAAKG,MAAO,CAAEK,UAAW,YAC3C,kBAAC,IAASN,IAAV,CAAcC,MAAOjB,EAAM,IACzB,kBAACvB,EAAD,CAAUD,KAAMoB,EAAc2B,yBAGlC,kBAAC,WAAD,CAAUT,SAAU,+BAClB,kBAAC,IAASE,IAAV,CAAcC,MAAOjB,EAAM,IACzB,kBAACrB,EAAD,QAGJ,kBAAC,WAAD,CAAUmC,SAAU,+BAClB,kBAAC,IAASE,IAAV,CAAcC,MAAOjB,EAAM,IACzB,kBAACf,EAAD,CACEuC,SAAU5B,EAAc6B,UACxBC,UAAWhC,MAIjB,kBAAC,WAAD,CAAUoB,SAAU,+BAClB,kBAAC,IAASE,IAAV,CAAcC,MAAOjB,EAAM,IACzB,kBAACd,EAAD,CACEwC,UAAWhC,EACXlB,KAAMoB,EAAcmB,aAI1B,kBAAC,WAAD,CAAUD,SAAU,+BAClB,kBAAC,IAASE,IAAV,CAAcC,MAAOjB,EAAM,IACzB,kBAACpB,EAAD,CACEc,eAAgBA,EAChBiC,kBAAmBhC,a,oCCrGlCH,G,SAAAA,K,cAAAA,E,aAAAA,E,cAAAA,M,KAMUA","file":"static/js/13.59ee45fd.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst httpClient = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n});\n\nconst fetcher = async (url: string) => {\n  const response = await httpClient.get(url);\n\n  return response.data;\n};\n\nexport default fetcher;\n","import React, { useState, lazy, Suspense } from 'react';\nimport useSWR from 'swr';\nimport { Grid } from 'semantic-ui-react';\nimport { useTrail, animated } from 'react-spring';\n\nimport fetcher from '../utils/fetcher';\nimport DateRange from '../constants/DateRange';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst GeoChart = lazy(() => import('./GeoChart'));\nconst GeoLegend = lazy(() => import('./GeoLegend'));\nconst FilterButtonGroup = lazy(() => import('./FilterButtonGroup'));\nconst PeopleHospitalised = lazy(() => import('./PeopleHospitalised'));\nconst DailyHospitalAdmissions = lazy(() => import('./DailyHospitalAdmissions'));\nconst VentilatorBeds = lazy(() => import('./VentilatorBeds'));\nconst Stats = lazy(() => import('./Stats'));\nconst NewCasesChart = lazy(() => import('./NewCasesChart'));\nconst DailyDeathsChart = lazy(() => import('./DailyDeathsChart'));\n\nconst { Column, Row } = Grid;\n\nconst Dashboard = () => {\n  const [chartDateRange, setChartDateRange] = useState(DateRange.OneMonth);\n\n  const { data: dashboardData } = useSWR('/dashboard', fetcher, {\n    revalidateOnFocus: false,\n    suspense: true,\n  });\n\n  const trail = useTrail(5, {\n    from: { transform: 'translate3d(0, 30px, 0)', opacity: 0 },\n    transform: 'translate3d(0, 0px, 0)',\n    opacity: 1,\n    config: { mass: 1, tension: 2000, friction: 200 },\n  });\n\n  return (\n    <>\n      <div className=\"banner\">UK Covid19 Dashboard</div>\n      <div className=\"dashboard-grid\">\n        <Grid centered>\n          <Row>\n            <Column mobile={16} tablet={8} computer={6}>\n              <Suspense fallback={<div />}>\n                <Stats data={dashboardData.overview} />\n              </Suspense>\n              <Suspense fallback={<div />}>\n                <animated.div style={trail[1]}>\n                  <DailyHospitalAdmissions\n                    data={dashboardData.hospital_admissions}\n                  />\n                </animated.div>\n              </Suspense>\n              <Suspense fallback={<div />}>\n                <animated.div style={trail[2]}>\n                  <PeopleHospitalised\n                    data={dashboardData.people_hospitalised}\n                  />\n                </animated.div>\n              </Suspense>\n              <Suspense fallback={<div />}>\n                <animated.div style={trail[3]}>\n                  <VentilatorBeds data={dashboardData.ventilator_beds} />\n                </animated.div>\n              </Suspense>\n            </Column>\n            <Column mobile={16} tablet={8} computer={6}>\n              <animated.h2 className=\"map-title\" style={trail[4]}>\n                UK Map\n              </animated.h2>\n              <Suspense fallback={<div style={{ minHeight: '100vh' }} />}>\n                <animated.div style={trail[3]}>\n                  <GeoChart data={dashboardData.regional_total_cases} />\n                </animated.div>\n              </Suspense>\n              <Suspense fallback={<div />}>\n                <animated.div style={trail[3]}>\n                  <GeoLegend />\n                </animated.div>\n              </Suspense>\n              <Suspense fallback={<div />}>\n                <animated.div style={trail[1]}>\n                  <NewCasesChart\n                    newCases={dashboardData.new_cases}\n                    dateRange={chartDateRange}\n                  />\n                </animated.div>\n              </Suspense>\n              <Suspense fallback={<div />}>\n                <animated.div style={trail[2]}>\n                  <DailyDeathsChart\n                    dateRange={chartDateRange}\n                    data={dashboardData.overview}\n                  />\n                </animated.div>\n              </Suspense>\n              <Suspense fallback={<div />}>\n                <animated.div style={trail[2]}>\n                  <FilterButtonGroup\n                    chartDateRange={chartDateRange}\n                    onDateRangeChange={setChartDateRange}\n                  />\n                </animated.div>\n              </Suspense>\n            </Column>\n          </Row>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;\n","enum DateRange {\n  Beginning = '1',\n  OneMonth = '2',\n  TwoWeeks = '3',\n}\n\nexport default DateRange;\n"],"sourceRoot":""}