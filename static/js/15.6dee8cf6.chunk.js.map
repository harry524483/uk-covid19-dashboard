{"version":3,"sources":["components/GeoChart.tsx","hooks/useResizeObserver.ts"],"names":["GeoChart","totalCases","data","svgRef","useRef","wrapperRef","dimensions","useResizeObserver","geoData","useSWR","fetcher","revalidateOnFocus","suspense","useEffect","topology","topojson","objects","regions","current","getBoundingClientRect","width","height","projection","geoMercator","fitSize","path","geoPath","colorScale","scaleThreshold","domain","range","schemeBlues","svg","select","selectAll","features","join","style","on","d","properties","nuts118cd","transition","duration","append","attr","text","find","name","nuts118nm","result","toLocaleString","remove","ref","marginTop","className","useState","setDimensions","target","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve"],"mappings":"yHAAA,uEAkIeA,UAnHE,SAAC,GAAoC,IAApBC,EAAmB,EAAjCC,KAAQA,KACpBC,EAASC,iBAAO,MAChBC,EAAaD,iBAAuB,MACpCE,EAAaC,YAAkBF,GAEvBG,EAAYC,YAAO,YAAaC,IAAS,CACrDC,mBAAmB,EACnBC,UAAU,IAFJV,KAqGR,OAhGAW,qBAAU,WACR,IAAMC,EAAWC,IAAiBP,EAASA,EAAQQ,QAAQC,SAD7C,EAIZX,GACCD,EAAWa,SAAWb,EAAWa,QAAQC,wBAFpCC,EAHM,EAGNA,MAAOC,EAHD,EAGCA,OAITC,EAAaC,cAAcC,QAAQ,CAACJ,EAAOC,GAASP,GAEpDW,EAAOC,cAAUJ,WAAWA,GAE5BK,EAAaC,cAChBC,OAAOC,YAAM,EAAG,IAAO,MACvBA,MAAMC,IAAY,IAEfC,EAAMC,YAAO9B,EAAOe,SAE1Bc,EACGE,UAAU,YACVhC,KAAKY,EAASqB,UACdC,KAAK,QACLC,MAAM,SAAU,WAChBC,GAAG,cAAc,SAACC,GACjBP,EACGE,UADH,mBACyBK,EAAEC,WAAWC,YACnCC,aACAC,SAAS,KACTN,MAAM,SAAU,WAEnBL,EACGY,OAAO,QACPC,KAAK,QAAS,eACdA,KAAK,IAAK,IACVA,KAAK,OAAQ,WACbR,MAAM,cAAe,QACrBO,OAAO,SACPE,MAAK,WAIJ,OAHe7C,EAAW8C,MACxB,gBAAGC,EAAH,EAAGA,KAAH,OAAcT,EAAEC,WAAWS,YAAcD,KAGlCT,EAAEC,WAAWS,UAEf,aAERJ,KAAK,IAAK,GACVA,KAAK,KAAM,GACXA,KAAK,KAAM,IACXD,OAAO,SACPE,MAAK,WACJ,IAAMI,EAASjD,EAAW8C,MACxB,gBAAGC,EAAH,EAAGA,KAAH,OAAcT,EAAEC,WAAWS,YAAcD,KAE3C,OAAIE,EACKA,EAAOjD,WAAWkD,iBAEpB,KAERN,KAAK,IAAK,GACVA,KAAK,KAAM,GACXA,KAAK,KAAM,OAEfP,GAAG,cAAc,SAACC,GACjBP,EACGC,OADH,mBACsBM,EAAEC,WAAWC,YAChCC,aACAC,SAAS,KACTN,MAAM,SAAU,WAEnBL,EAAIE,UAAU,gBAAgBkB,YAE/BP,KAAK,QAAS,WACdR,MAAM,SAAU,WAChBQ,KAAK,QAAQ,SAACN,GACb,IAAMW,EAASjD,EAAW8C,MACxB,gBAAGC,EAAH,EAAGA,KAAH,OAAcT,EAAEC,WAAWS,YAAcD,KAG3C,OACSrB,EADLuB,EACgBA,EAAOjD,WAET,MAEnB4C,KAAK,SAAS,SAACN,GAAD,wBAAuBA,EAAEC,WAAWC,cAClDI,KAAK,IAAKpB,GAEbO,EACGY,OAAO,QACPC,KAAK,QAAS,eACdA,KAAK,IAAK,GACVA,KAAK,IAAK,IACVA,KAAK,OAAQ,WACbR,MAAM,cAAe,UACrBS,KAAK,iBACP,CAACxC,EAAYE,EAASP,IAGvB,oCACE,yBAAKoD,IAAKhD,EAAYgC,MAAO,CAAEiB,UAAW,WACxC,yBAAKD,IAAKlD,EAAQoD,UAAU,gB,4DCpGrBhD,IArBW,SAAC8C,GAAmB,IAAD,EACPG,mBAAS,MADF,mBACpClD,EADoC,KACxBmD,EADwB,KAkB3C,OAfA5C,qBAAU,WACR,IAAM6C,EAASL,EAAInC,QAEbyC,EAAiB,IAAIC,KAAe,SAACC,GACzCA,EAAQC,SAAQ,SAACC,GACfN,EAAcM,EAAMC,mBAKxB,OADAL,EAAeM,QAAQP,GAChB,WACLC,EAAeO,UAAUR,MAE1B,CAACL,IAEG/C","file":"static/js/15.6dee8cf6.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as topojson from 'topojson';\nimport {\n  geoPath,\n  geoMercator,\n  select,\n  scaleThreshold,\n  range,\n  schemeBlues,\n} from 'd3';\nimport useSWR from 'swr';\n\nimport useResizeObserver from '../hooks/useResizeObserver';\nimport fetcher from '../utils/fetcher';\n\nconst GeoChart = ({ data: { data: totalCases } }) => {\n  const svgRef = useRef(null);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const { data: geoData } = useSWR('/geo-data', fetcher, {\n    revalidateOnFocus: false,\n    suspense: true,\n  });\n\n  useEffect(() => {\n    const topology = topojson.feature(geoData, geoData.objects.regions);\n\n    const { width, height } =\n      dimensions ||\n      (wrapperRef.current && wrapperRef.current.getBoundingClientRect());\n\n    const projection = geoMercator().fitSize([width, height], topology);\n\n    const path = geoPath().projection(projection) as any;\n\n    const colorScale = scaleThreshold()\n      .domain(range(0, 60000, (60000 - 0) / 6))\n      .range(schemeBlues['7']);\n\n    const svg = select(svgRef.current);\n\n    svg\n      .selectAll('.country')\n      .data(topology.features)\n      .join('path')\n      .style('stroke', '#FFFFFF')\n      .on('mouseenter', (d: any) => {\n        svg\n          .selectAll(`.country.${d.properties.nuts118cd}`)\n          .transition()\n          .duration(200)\n          .style('stroke', '#005B9A');\n\n        svg\n          .append('text')\n          .attr('class', 'chart-stats')\n          .attr('y', 20)\n          .attr('fill', '#952B60')\n          .style('font-weight', 'bold')\n          .append('tspan')\n          .text(() => {\n            const result = totalCases.find(\n              ({ name }) => d.properties.nuts118nm === name\n            );\n            if (result) {\n              return d.properties.nuts118nm;\n            }\n            return 'Unknown';\n          })\n          .attr('x', 0)\n          .attr('dx', 0)\n          .attr('dy', 25)\n          .append('tspan')\n          .text(() => {\n            const result = totalCases.find(\n              ({ name }) => d.properties.nuts118nm === name\n            );\n            if (result) {\n              return result.totalCases.toLocaleString();\n            }\n            return 0;\n          })\n          .attr('x', 0)\n          .attr('dx', 0)\n          .attr('dy', 30);\n      })\n      .on('mouseleave', (d: any) => {\n        svg\n          .select(`.country.${d.properties.nuts118cd}`)\n          .transition()\n          .duration(200)\n          .style('stroke', '#FFFFFF');\n\n        svg.selectAll('.chart-stats').remove();\n      })\n      .attr('class', 'country')\n      .style('cursor', 'pointer')\n      .attr('fill', (d: any) => {\n        const result = totalCases.find(\n          ({ name }) => d.properties.nuts118nm === name\n        );\n\n        if (result) {\n          return colorScale(result.totalCases);\n        }\n        return colorScale(0);\n      })\n      .attr('class', (d: any) => `country ${d.properties.nuts118cd}`)\n      .attr('d', path);\n\n    svg\n      .append('text')\n      .attr('class', 'chart-title')\n      .attr('x', 0)\n      .attr('y', 20)\n      .attr('fill', '#952B60')\n      .style('font-weight', 'bolder')\n      .text('Total Cases');\n  }, [dimensions, geoData, totalCases]);\n\n  return (\n    <>\n      <div ref={wrapperRef} style={{ marginTop: '1.5rem' }}>\n        <svg ref={svgRef} className=\"country\"></svg>\n      </div>\n    </>\n  );\n};\n\nexport default GeoChart;\n","import { useState, useEffect } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst useResizeObserver = (ref: any): any => {\n  const [dimensions, setDimensions] = useState(null);\n\n  useEffect(() => {\n    const target = ref.current;\n\n    const resizeObserver = new ResizeObserver((entries: any) => {\n      entries.forEach((entry: any) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n\n    resizeObserver.observe(target);\n    return () => {\n      resizeObserver.unobserve(target);\n    };\n  }, [ref]);\n\n  return dimensions;\n};\n\nexport default useResizeObserver;\n"],"sourceRoot":""}