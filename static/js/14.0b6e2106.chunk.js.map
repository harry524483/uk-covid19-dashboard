{"version":3,"sources":["utils/fetcher.ts","components/GeoChart.tsx","hooks/useResizeObserver.ts"],"names":["httpClient","axios","create","baseURL","process","fetcher","url","a","structure","date","name","cases","daily","cumulative","deaths","tests","pillarOne","pillarTwo","pillarThree","pillarFour","apiParams","join","JSON","stringify","encodedParams","encodeURI","apiUrl","get","response","data","GeoChart","regionalTotalCases","svgRef","useRef","wrapperRef","dimensions","useResizeObserver","geoData","useSWR","revalidateOnFocus","suspense","useEffect","topology","topojson","objects","regions","current","getBoundingClientRect","width","height","projection","geoMercator","fitSize","path","geoPath","colorScale","scaleThreshold","domain","range","schemeBlues","svg","select","selectAll","features","on","d","properties","nuts118cd","transition","duration","style","append","attr","text","find","nuts118nm","result","totalCases","toLocaleString","remove","ref","marginTop","className","position","id","colorInterpolationFilters","type","values","useState","setDimensions","target","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve"],"mappings":"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","file":"static/js/14.0b6e2106.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst httpClient = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n});\n\nconst fetcher = async (url: string) => {\n  if (url === '/dashboard') {\n    const filters = ['areaType=nation'];\n    const structure = {\n      date: 'date',\n      name: 'areaName',\n      cases: {\n        daily: 'newCasesByPublishDate',\n        cumulative: 'cumCasesByPublishDate',\n      },\n      deaths: {\n        daily: 'newDeathsByPublishDate',\n        cumulative: 'cumDeathsByPublishDate',\n      },\n      tests: {\n        pillarOne: 'newPillarOneTestsByPublishDate',\n        pillarTwo: 'newPillarTwoTestsByPublishDate',\n        pillarThree: 'newPillarThreeTestsByPublishDate',\n        pillarFour: 'newPillarFourTestsByPublishDate',\n      },\n    };\n    const latestBy = 'newCasesByPublishDate';\n    const apiParams = `filters=${filters.join(\n        ';'\n      )}&latestBy=${latestBy}&structure=${JSON.stringify(structure)}`,\n      encodedParams = encodeURI(apiParams);\n\n    const apiUrl = `https://api.coronavirus-staging.data.gov.uk/v1/data?${encodedParams}`;\n\n    const response = await axios.get(apiUrl);\n\n    return response.data;\n  } else if (url === '/website_timestamp') {\n    const response = await axios.get(\n      'https://c19pubstaging.azureedge.net/assets/dispatch/website_timestamp'\n    );\n    return response.data;\n  } else {\n    const response = await httpClient.get(url);\n\n    return response.data;\n  }\n};\n\nexport default fetcher;\n","import React, { useEffect, useRef } from 'react';\nimport useSWR from 'swr';\nimport * as topojson from 'topojson';\nimport {\n  geoPath,\n  geoMercator,\n  select,\n  scaleThreshold,\n  range,\n  schemeBlues,\n} from 'd3';\n\nimport useResizeObserver from '../hooks/useResizeObserver';\nimport fetcher from '../utils/fetcher';\n\nconst GeoChart = ({ regionalTotalCases }) => {\n  const svgRef = useRef(null);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const { data: geoData } = useSWR('/geo-data', fetcher, {\n    revalidateOnFocus: false,\n    suspense: true,\n  });\n\n  useEffect(() => {\n    const topology = topojson.feature(geoData, geoData.objects.regions);\n\n    const { width, height } =\n      dimensions ||\n      (wrapperRef.current && wrapperRef.current.getBoundingClientRect());\n\n    const projection = geoMercator().fitSize([width, height], topology);\n\n    const path = geoPath().projection(projection) as any;\n\n    const colorScale = scaleThreshold()\n      .domain(range(0, 60000, (60000 - 0) / 6))\n      .range(schemeBlues['7']);\n\n    const svg = select(svgRef.current);\n\n    svg\n      .selectAll('.country')\n      .data(topology.features)\n      .join('path')\n      .on('mouseenter', (d: any) => {\n        svg\n          .selectAll(`.country.${d.properties.nuts118cd}`)\n          .transition()\n          .duration(200)\n          .style('stroke', '#007bff');\n\n        svg\n          .append('text')\n          .attr('class', 'chart-stats')\n          .attr('y', 20)\n          .attr('fill', '#007bff')\n          .style('font-weight', 'bold')\n          .append('tspan')\n          .text(() => {\n            const result = regionalTotalCases.find(\n              ({ name }) => d.properties.nuts118nm === name\n            );\n            if (result) {\n              return d.properties.nuts118nm;\n            }\n            return 'Unknown';\n          })\n          .attr('x', 0)\n          .attr('dx', 0)\n          .attr('dy', 25)\n          .append('tspan')\n          .text(() => {\n            const result = regionalTotalCases.find(\n              ({ name }) => d.properties.nuts118nm === name\n            );\n            if (result) {\n              return result.totalCases ? result.totalCases.toLocaleString() : 0;\n            }\n            return 0;\n          })\n          .attr('x', 0)\n          .attr('dx', 0)\n          .attr('dy', 30);\n      })\n      .on('mouseleave', (d: any) => {\n        svg\n          .select(`.country.${d.properties.nuts118cd}`)\n          .transition()\n          .duration(200)\n          .style('stroke', 'none');\n\n        svg.selectAll('.chart-stats').remove();\n      })\n      .attr('class', 'country')\n      .style('cursor', 'pointer')\n      .attr('fill', (d: any) => {\n        const result = regionalTotalCases.find(\n          ({ name }) => d.properties.nuts118nm === name\n        );\n\n        if (result) {\n          return colorScale(result.totalCases);\n        }\n        return colorScale(0);\n      })\n      .attr('class', (d: any) => `country ${d.properties.nuts118cd}`)\n      .attr('d', path);\n\n    svg\n      .append('text')\n      .attr('class', 'chart-title')\n      .attr('x', 0)\n      .attr('y', 20)\n      .attr('fill', '#007bff')\n      .text('Total Cases');\n  }, [dimensions, geoData, regionalTotalCases]);\n\n  return (\n    <>\n      <div ref={wrapperRef} style={{ marginTop: '1.5rem' }}>\n        <svg ref={svgRef} className=\"country\"></svg>\n      </div>\n      <svg style={{ position: 'absolute', height: 0 }}>\n        <defs>\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n            <feColorMatrix\n              type=\"matrix\"\n              values=\"0.91372549  0           0            0  0.08627451\n                      0           0.91372549  0            0  0.08627451\n                      0           0           0.854901961  0  0.145098039\n                      0           0           0            1  0\"\n            />\n          </filter>\n        </defs>\n      </svg>\n    </>\n  );\n};\n\nexport default GeoChart;\n","import { useState, useEffect } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst useResizeObserver = (ref: any): any => {\n  const [dimensions, setDimensions] = useState(null);\n\n  useEffect(() => {\n    const target = ref.current;\n\n    const resizeObserver = new ResizeObserver((entries: any) => {\n      entries.forEach((entry: any) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n\n    resizeObserver.observe(target);\n    return () => {\n      resizeObserver.unobserve(target);\n    };\n  }, [ref]);\n\n  return dimensions;\n};\n\nexport default useResizeObserver;\n"],"sourceRoot":""}