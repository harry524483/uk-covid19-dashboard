{"version":3,"sources":["components/GeoLegend.tsx","hooks/useResizeObserver.ts"],"names":["GeoLegend","svgRef","useRef","wrapperRef","dimensions","useResizeObserver","useEffect","current","getBoundingClientRect","width","height","xScale","scaleLinear","domain","rangeRound","colorScale","scaleThreshold","range","schemeBlues","svg","select","selectAll","remove","g","append","style","legendData","map","d","values","invertExtent","data","enter","attr","text","call","axisBottom","tickSize","tickFormat","x","Math","round","toString","tickValues","ref","className","useState","setDimensions","target","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve"],"mappings":"yHAAA,4CA+FeA,UAnFG,WAChB,IAAMC,EAASC,iBAAO,MAChBC,EAAaD,iBAAuB,MACpCE,EAAaC,YAAkBF,GAuErC,OArEAG,qBAAU,WAAO,IAAD,EAEZF,GACCD,EAAWI,SAAWJ,EAAWI,QAAQC,wBAFpCC,EADM,EACNA,MAAOC,EADD,EACCA,OAITC,EAASC,cAAcC,OAAO,CAAC,EAAG,MAAQC,WAAW,CAAC,EAAGL,IAEzDM,EAAaC,cAChBH,OAAOI,YAAM,EAAG,IAAO,MACvBA,MAAMC,IAAY,IAEfC,EAAMC,YAAOnB,EAAOM,SAE1BY,EAAIE,UAAU,KAAKC,SAEnB,IAAMC,EAAIJ,EACPK,OAAO,KACPC,MAAM,YAFC,oBAEyBhB,EAFzB,YAEkCC,EAFlC,MAIJgB,EAAaX,EAAWE,QAAQU,KAAI,SAACC,GACzC,IAAMC,EAASd,EAAWe,aAAaF,GAQvC,OANKC,EAAO,KACVA,EAAO,GAAKlB,EAAOE,SAAS,IAEzBgB,EAAO,KACVA,EAAO,GAAKlB,EAAOE,SAAS,IAEvBgB,KAGTN,EAAEF,UAAU,QACTU,KAAKL,GACLM,QACAR,OAAO,QACPS,KAAK,SAAU,IACfA,KAAK,KAAK,SAACL,GACV,OAAOjB,EAAOiB,EAAE,OAEjBK,KAAK,SAAS,SAACL,GACd,OAAOjB,EAAOiB,EAAE,IAAMjB,EAAOiB,EAAE,OAEhCK,KAAK,QAAQ,SAACL,GACb,OAAOb,EAAWa,EAAE,OAGxBL,EAAEC,OAAO,QACNS,KAAK,QAAS,kBACdA,KAAK,IAAKtB,EAAOM,QAAQ,IACzBgB,KAAK,KAAM,GACXA,KAAK,OAAQ,QACbA,KAAK,cAAe,SACpBA,KAAK,cAAe,QACpBC,KAAK,eAERX,EAAEE,MAAM,YAAR,qBAAmCf,EAAnC,QACGuB,KAAK,QAAS,aACdE,KACCC,YAAWzB,GACR0B,SAAS,IACTC,YAAW,SAACC,GACX,OAAOC,KAAKC,MAAMF,GAAGG,cAEtBC,WAAW5B,EAAWF,WAE1BO,OAAO,WACPE,WACF,CAAClB,IAGF,oCACE,yBAAKwC,IAAKzC,GACR,yBAAKyC,IAAK3C,EAAQ4C,UAAU,e,4DCjErBxC,IArBW,SAACuC,GAAmB,IAAD,EACPE,mBAAS,MADF,mBACpC1C,EADoC,KACxB2C,EADwB,KAkB3C,OAfAzC,qBAAU,WACR,IAAM0C,EAASJ,EAAIrC,QAEb0C,EAAiB,IAAIC,KAAe,SAACC,GACzCA,EAAQC,SAAQ,SAACC,GACfN,EAAcM,EAAMC,mBAKxB,OADAL,EAAeM,QAAQP,GAChB,WACLC,EAAeO,UAAUR,MAE1B,CAACJ,IAEGxC","file":"static/js/15.15d297ad.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  select,\n  scaleLinear,\n  scaleThreshold,\n  range,\n  schemeBlues,\n  axisBottom,\n} from 'd3';\n\nimport useResizeObserver from '../hooks/useResizeObserver';\n\nconst GeoLegend = () => {\n  const svgRef = useRef(null);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const dimensions = useResizeObserver(wrapperRef);\n\n  useEffect(() => {\n    const { width, height } =\n      dimensions ||\n      (wrapperRef.current && wrapperRef.current.getBoundingClientRect());\n\n    const xScale = scaleLinear().domain([0, 60000]).rangeRound([0, width]);\n\n    const colorScale = scaleThreshold()\n      .domain(range(0, 60000, (60000 - 0) / 6))\n      .range(schemeBlues['7']);\n\n    const svg = select(svgRef.current);\n\n    svg.selectAll('g').remove();\n\n    const g = svg\n      .append('g')\n      .style('transform', `translate(${width},${height})`);\n\n    const legendData = colorScale.range().map((d) => {\n      const values = colorScale.invertExtent(d);\n\n      if (!values[0]) {\n        values[0] = xScale.domain()[0];\n      }\n      if (!values[1]) {\n        values[1] = xScale.domain()[1];\n      }\n      return values;\n    });\n\n    g.selectAll('rect')\n      .data(legendData)\n      .enter()\n      .append('rect')\n      .attr('height', 12)\n      .attr('x', (d: any) => {\n        return xScale(d[0]);\n      })\n      .attr('width', (d: any) => {\n        return xScale(d[1]) - xScale(d[0]);\n      })\n      .attr('fill', (d: any) => {\n        return colorScale(d[0]);\n      });\n\n    g.append('text')\n      .attr('class', 'legend-caption')\n      .attr('x', xScale.range()[0])\n      .attr('y', -6)\n      .attr('fill', '#000')\n      .attr('text-anchor', 'start')\n      .attr('font-weight', 'bold')\n      .text('Total cases');\n\n    g.style('transform', `translateY(${height}px)`)\n      .attr('class', 'tick-line')\n      .call(\n        axisBottom(xScale)\n          .tickSize(16)\n          .tickFormat((x: any) => {\n            return Math.round(x).toString();\n          })\n          .tickValues(colorScale.domain())\n      )\n      .select('.domain')\n      .remove();\n  }, [dimensions]);\n\n  return (\n    <>\n      <div ref={wrapperRef}>\n        <svg ref={svgRef} className=\"legend\"></svg>\n      </div>\n    </>\n  );\n};\n\nexport default GeoLegend;\n","import { useState, useEffect } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst useResizeObserver = (ref: any): any => {\n  const [dimensions, setDimensions] = useState(null);\n\n  useEffect(() => {\n    const target = ref.current;\n\n    const resizeObserver = new ResizeObserver((entries: any) => {\n      entries.forEach((entry: any) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n\n    resizeObserver.observe(target);\n    return () => {\n      resizeObserver.unobserve(target);\n    };\n  }, [ref]);\n\n  return dimensions;\n};\n\nexport default useResizeObserver;\n"],"sourceRoot":""}