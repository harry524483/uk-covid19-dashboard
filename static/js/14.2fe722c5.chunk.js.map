{"version":3,"sources":["utils/dateRangeFilter.ts","components/DailyDeathsChart.tsx"],"names":["dateRangeFilter","data","dateRange","currentDate","moment","format","DateRange","Beginning","OneMonth","oneMonthOldDate","subtract","filter","date","isBetween","TwoWeeks","twoWeeksOldDate","Chart","lazy","DailyDeathsChart","fallback","filteredDailyDeaths","dailyDeaths","type","labels","map","datasets","label","value","backgroundColor","options","responsive","legend","display","title","text","layout","padding","createChartProps"],"mappings":"yHAAA,6BAiCeA,IA7BS,SACtBC,EACAC,GAEA,IAAMC,EAAcC,MAASC,OAAO,cAEpC,GAAIH,IAAcI,IAAUC,UAC1B,OAAON,EAGT,GAAIC,IAAcI,IAAUE,SAAU,CACpC,IAAMC,EAAkBL,MAASM,SAAS,EAAG,UAAUL,OAAO,cAE9D,OAAOJ,EAAKU,QAAO,gBAAGC,EAAH,EAAGA,KAAH,OACjBR,IAAOQ,GAAMC,UAAUJ,EAAiBN,MAI5C,GAAID,IAAcI,IAAUQ,SAAU,CACpC,IAAMC,EAAkBX,MAASM,SAAS,EAAG,SAASL,OAAO,cAE7D,OAAOJ,EAAKU,QAAO,gBAAGC,EAAH,EAAGA,KAAH,OACjBR,IAAOQ,GAAMC,UAAUE,EAAiBZ,MAI5C,OAAOF,I,iCC9BT,qDAKMe,EAAQC,gBAAK,kBAAM,uDA6CVC,UA3CU,SAAC,GAAmC,IAAjChB,EAAgC,EAAhCA,UAAmBD,EAAa,EAArBA,KAAQA,KAoC7C,OACE,kBAAC,WAAD,CAAUkB,SAAU,+BAClB,kBAACH,EAAD,iBArCqB,WACvB,IAAMI,EAAsBpB,YAAgBC,EAAKoB,YAAanB,GAO9D,MAAO,CACLoB,KAAM,MACNrB,KAAM,CACJsB,OARWH,EAAoBI,KAAI,gBAAGZ,EAAH,EAAGA,KAAH,OACrCR,IAAOQ,GAAMP,OAAO,aAQlBoB,SAAU,CACR,CACEH,KAAM,MACNI,MAAO,QACPzB,KAVMmB,EAAoBI,KAAI,qBAAGG,SAWjCC,gBAAiB,aAIvBC,QAAS,CACPC,YAAY,EACZC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CACLD,SAAS,EACTE,KAAM,sBAERC,OAAQ,CACNC,QAAS,MAQFC,GAAX,CAA+BT,gBAAgB","file":"static/js/14.2fe722c5.chunk.js","sourcesContent":["import moment from 'moment';\n\nimport DateRange from '../constants/DateRange';\n\nconst dateRangeFilter = (\n  data: Array<{ date: string }>,\n  dateRange: DateRange\n): Array<any> => {\n  const currentDate = moment().format('YYYY-MM-DD');\n\n  if (dateRange === DateRange.Beginning) {\n    return data;\n  }\n\n  if (dateRange === DateRange.OneMonth) {\n    const oneMonthOldDate = moment().subtract(1, 'months').format('YYYY-MM-DD');\n\n    return data.filter(({ date }) =>\n      moment(date).isBetween(oneMonthOldDate, currentDate)\n    );\n  }\n\n  if (dateRange === DateRange.TwoWeeks) {\n    const twoWeeksOldDate = moment().subtract(2, 'weeks').format('YYYY-MM-DD');\n\n    return data.filter(({ date }) =>\n      moment(date).isBetween(twoWeeksOldDate, currentDate)\n    );\n  }\n\n  return data;\n};\n\nexport default dateRangeFilter;\n","import React, { lazy, Suspense } from 'react';\nimport moment from 'moment';\n\nimport dateRangeFilter from '../utils/dateRangeFilter';\n\nconst Chart = lazy(() => import('./Chart'));\n\nconst DailyDeathsChart = ({ dateRange, data: { data } }) => {\n  const createChartProps = () => {\n    const filteredDailyDeaths = dateRangeFilter(data.dailyDeaths, dateRange);\n\n    const labels = filteredDailyDeaths.map(({ date }) =>\n      moment(date).format('DD MMM')\n    );\n    const cases = filteredDailyDeaths.map(({ value }) => value);\n\n    return {\n      type: 'bar',\n      data: {\n        labels,\n        datasets: [\n          {\n            type: 'bar',\n            label: 'Cases',\n            data: cases,\n            backgroundColor: '#57E1CC',\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        legend: { display: false },\n        title: {\n          display: true,\n          text: 'Daily deaths in UK',\n        },\n        layout: {\n          padding: 10,\n        },\n      },\n    };\n  };\n\n  return (\n    <Suspense fallback={<div />}>\n      <Chart {...createChartProps()} backgroundColor=\"#DFFDF8\" />\n    </Suspense>\n  );\n};\n\nexport default DailyDeathsChart;\n"],"sourceRoot":""}