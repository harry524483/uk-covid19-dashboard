{"version":3,"sources":["services/getLastUpdatedDate.ts","services/getCovidData.ts","reducers/initialState.ts","reducers/dashboard.ts","reducers/actionTypes.ts","hooks/useDashboardApiRequest.ts","components/Dashboard.tsx","constants/DateRange.ts","utils/formatNumber.ts"],"names":["getLastUpdatedDate","a","axios","get","response","data","structure","date","name","cases","daily","cumulative","deaths","tests","pillarOne","pillarTwo","pillarThree","pillarFour","getCovidData","filters","latestByClause","latestBy","apiParams","join","JSON","stringify","encodedParams","encodeURI","console","log","url","initialState","loading","lastUpdatedAt","error","nationDailyRecords","overview","nationNewCases","nationNewDeaths","regionalTotalCases","createNationDailyRecords","nationDailyData","map","formatNumber","createDailyOverview","totalCases","dailyCases","dailyDeaths","totalDeaths","createNationNewCases","nationData","reverse","createNationNewDeaths","createRegionalTotalCases","regionalData","dashboard","state","type","payload","nationOverview","dailyRegionData","latestDate","moment","format","filter","nationDailyOverview","find","useDashboardApiRequest","useReducer","dashboardReducer","dispatch","fetchDashboardData","useCallback","undefined","Promise","all","message","GeoChart","lazy","GeoLegend","FilterButtonGroup","NationDailyRecords","Stats","NewCasesChart","DailyDeathsChart","Dashboard","useState","DateRange","OneMonth","chartDateRange","setChartDateRange","useEffect","trail","useTrail","from","transform","opacity","config","mass","tension","friction","className","CircularProgress","Grid","container","spacing","justify","item","xs","sm","md","fallback","div","style","h2","minHeight","newCases","dateRange","newDeaths","onDateRangeChange","value","toLocaleString"],"mappings":"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","file":"static/js/10.ee0f6b4f.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst getLastUpdatedDate = async () => {\n  const response = await axios.get(\n    'https://c19pub.azureedge.net/assets/dispatch/website_timestamp'\n  );\n\n  return response.data;\n};\n\nexport default getLastUpdatedDate;\n","import axios from 'axios';\n\nconst structure = {\n  date: 'date',\n  name: 'areaName',\n  cases: {\n    daily: 'newCasesByPublishDate',\n    cumulative: 'cumCasesByPublishDate',\n  },\n  deaths: {\n    daily: 'newDeathsByPublishDate',\n    cumulative: 'cumDeathsByPublishDate',\n  },\n  tests: {\n    pillarOne: 'newPillarOneTestsByPublishDate',\n    pillarTwo: 'newPillarTwoTestsByPublishDate',\n    pillarThree: 'newPillarThreeTestsByPublishDate',\n    pillarFour: 'newPillarFourTestsByPublishDate',\n  },\n};\n\nconst getCovidData = async (\n  filters: Array<string>,\n  latestByClause: string | null = null\n) => {\n  const latestBy = latestByClause ? `&${latestByClause}` : '';\n  const apiParams = `filters=${filters.join(\n      ';'\n    )}${latestBy}&structure=${JSON.stringify(structure)}`,\n    encodedParams = encodeURI(apiParams);\n\n  console.log('apiParams', apiParams);\n\n  const url = `https://api.coronavirus.data.gov.uk/v1/data?${encodedParams}`;\n\n  const response = await axios.get(url);\n\n  return response.data;\n};\n\nexport default getCovidData;\n","const initialState = {\n  loading: true,\n  lastUpdatedAt: null,\n  error: null,\n  nationDailyRecords: null,\n  overview: null,\n  nationNewCases: null,\n  nationNewDeaths: null,\n  regionalTotalCases: null,\n};\n\nexport default initialState;\n","import moment from 'moment';\n\nimport initialState from './initialState';\nimport {\n  FETCH_DASHBOARD_DATA_SUCCESS,\n  FETCH_DASHBOARD_DATA_START,\n  FETCH_DASHBOARD_DATA_ERROR,\n} from './actionTypes';\nimport formatNumber from '../utils/formatNumber';\n\nconst createNationDailyRecords = (nationDailyData) =>\n  nationDailyData.map(({ name, cases, deaths, tests }) => [\n    name,\n    formatNumber(cases.daily),\n    formatNumber(deaths.daily),\n    formatNumber(\n      tests.pillarOne + tests.pillarTwo + tests.pillarThree + tests.pillarFour\n    ),\n  ]);\n\nconst createDailyOverview = ({ cases, deaths }) =>\n  ({\n    totalCases: cases.cumulative,\n    dailyCases: cases.daily,\n    dailyDeaths: deaths.daily,\n    totalDeaths: deaths.cumulative,\n  } as any);\n\nconst createNationNewCases = (nationData) =>\n  nationData\n    .map(({ date, cases }) => ({ date, cases: cases.daily }))\n    .reverse() as any;\n\nconst createNationNewDeaths = (nationData) =>\n  nationData\n    .map(({ date, deaths }) => ({ date, deaths: deaths.daily }))\n    .reverse() as any;\n\nconst createRegionalTotalCases = (regionalData) =>\n  regionalData.map(({ cases, name }) => ({\n    name,\n    totalCases: cases.cumulative,\n  }));\n\nconst dashboard = (state = initialState, { type, payload }) => {\n  if (type === FETCH_DASHBOARD_DATA_START) {\n    return { ...state, loading: true };\n  }\n\n  if (type === FETCH_DASHBOARD_DATA_SUCCESS) {\n    const { date, nationOverview, nationData, dailyRegionData } = payload;\n    const latestDate = moment(date).format('YYYY-MM-DD');\n\n    const nationDailyData = nationData.filter(\n      ({ date }) => date === latestDate\n    );\n\n    const nationDailyOverview = nationOverview.find(\n      ({ date }) => date === latestDate\n    );\n\n    return {\n      ...state,\n      loading: false,\n      lastUpdatedAt: date,\n      nationDailyRecords: createNationDailyRecords(nationDailyData),\n      overview: createDailyOverview(nationDailyOverview),\n      nationNewCases: createNationNewCases(nationOverview),\n      nationNewDeaths: createNationNewDeaths(nationOverview),\n      regionalTotalCases: createRegionalTotalCases([\n        ...nationDailyData,\n        ...dailyRegionData,\n      ]),\n    };\n  }\n\n  if (type === FETCH_DASHBOARD_DATA_ERROR) {\n    return { ...state, loading: false, error: payload };\n  }\n};\n\nexport default dashboard;\n","export const FETCH_DASHBOARD_DATA_START = 'FETCH_DASHBOARD_DATA_START';\nexport const FETCH_DASHBOARD_DATA_SUCCESS = 'FETCH_DASHBOARD_DATA_SUCCESS';\nexport const FETCH_DASHBOARD_DATA_ERROR = 'FETCH_DASHBOARD_DATA_ERROR';\n","import { useReducer, useCallback } from 'react';\n\nimport getLastUpdatedDate from '../services/getLastUpdatedDate';\nimport getCovidData from '../services/getCovidData';\nimport dashboardReducer from '../reducers/dashboard';\nimport initialState from '../reducers/initialState';\nimport {\n  FETCH_DASHBOARD_DATA_START,\n  FETCH_DASHBOARD_DATA_SUCCESS,\n  FETCH_DASHBOARD_DATA_ERROR,\n} from '../reducers/actionTypes';\n\nconst useDashboardApiRequest = () => {\n  const [state, dispatch] = useReducer(dashboardReducer, initialState);\n\n  const fetchDashboardData = useCallback(async () => {\n    dispatch({ type: FETCH_DASHBOARD_DATA_START, payload: undefined });\n\n    try {\n      const [\n        date,\n        nationOverview,\n        nationData,\n        dailyRegionData,\n      ] = await Promise.all([\n        getLastUpdatedDate(),\n        getCovidData(['areaType=overview']),\n        getCovidData(['areaType=nation']),\n        getCovidData(['areaType=region'], 'latestBy=cumCasesByPublishDate'),\n      ]);\n\n      dispatch({\n        type: FETCH_DASHBOARD_DATA_SUCCESS,\n        payload: {\n          date,\n          nationOverview: nationOverview.data,\n          nationData: nationData.data,\n          dailyRegionData: dailyRegionData.data,\n        },\n      });\n    } catch (error) {\n      dispatch({ type: FETCH_DASHBOARD_DATA_ERROR, payload: error.message });\n    }\n  }, []);\n\n  return { state, fetchDashboardData };\n};\n\nexport default useDashboardApiRequest;\n","import React, { useState, lazy, Suspense, useEffect } from 'react';\nimport useSWR from 'swr';\nimport { useTrail, animated } from 'react-spring';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport fetcher from '../utils/fetcher';\nimport DateRange from '../constants/DateRange';\nimport useDashboardApiRequest from '../hooks/useDashboardApiRequest';\n\nconst GeoChart = lazy(() => import('./GeoChart'));\nconst GeoLegend = lazy(() => import('./GeoLegend'));\nconst FilterButtonGroup = lazy(() => import('./FilterButtonGroup'));\nconst PeopleHospitalised = lazy(() => import('./PeopleHospitalised'));\nconst DailyHospitalAdmissions = lazy(() => import('./DailyHospitalAdmissions'));\nconst NationDailyRecords = lazy(() => import('./NationDailyRecords'));\nconst VentilatorBeds = lazy(() => import('./VentilatorBeds'));\nconst Stats = lazy(() => import('./Stats'));\nconst NewCasesChart = lazy(() => import('./NewCasesChart'));\nconst DailyDeathsChart = lazy(() => import('./DailyDeathsChart'));\n\nconst Dashboard = () => {\n  const [chartDateRange, setChartDateRange] = useState(DateRange.OneMonth);\n\n  const { state, fetchDashboardData } = useDashboardApiRequest();\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  const trail = useTrail(5, {\n    from: { transform: 'translate3d(0, 30px, 0)', opacity: 0 },\n    transform: 'translate3d(0, 0px, 0)',\n    opacity: 1,\n    config: { mass: 1, tension: 2000, friction: 200 },\n  });\n\n  if (state && state.loading) {\n    return (\n      <div className=\"loading\">\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"banner\">UK Covid19 Dashboard</div>\n      <div className=\"dashboard-grid\">\n        <Grid container spacing={3} justify=\"center\">\n          <Grid item xs={12} sm={12} md={4}>\n            <Suspense fallback={<div />}>\n              <Stats\n                overview={state?.overview}\n                lastUpdatedAt={state?.lastUpdatedAt}\n              />\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[2]}>\n                <NationDailyRecords\n                  nationDailyRecords={state?.nationDailyRecords}\n                />\n              </animated.div>\n            </Suspense>\n            {/* <Suspense fallback={<div />}>\n              <animated.div style={trail[1]}>\n                <DailyHospitalAdmissions\n                  data={dashboardData.hospital_admissions}\n                />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[2]}>\n                <PeopleHospitalised data={dashboardData.people_hospitalised} />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[3]}>\n                <VentilatorBeds data={dashboardData.ventilator_beds} />\n              </animated.div>\n            </Suspense> */}\n          </Grid>\n          <Grid item xs={12} sm={12} md={4}>\n            <animated.h2 className=\"map-title\" style={trail[4]}>\n              UK Map\n            </animated.h2>\n            <Suspense fallback={<div style={{ minHeight: '100vh' }} />}>\n              <animated.div style={trail[3]}>\n                <GeoChart regionalTotalCases={state?.regionalTotalCases} />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[3]}>\n                <GeoLegend />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[1]}>\n                <NewCasesChart\n                  newCases={state?.nationNewCases}\n                  dateRange={chartDateRange}\n                />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[2]}>\n                <DailyDeathsChart\n                  newDeaths={state?.nationNewDeaths}\n                  dateRange={chartDateRange}\n                />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[2]}>\n                <FilterButtonGroup\n                  chartDateRange={chartDateRange}\n                  onDateRangeChange={setChartDateRange}\n                />\n              </animated.div>\n            </Suspense>\n          </Grid>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;\n","enum DateRange {\n  Beginning = '1',\n  OneMonth = '2',\n  TwoWeeks = '3',\n}\n\nexport default DateRange;\n","export default (value: number | undefined) =>\n  value ? value.toLocaleString() : 0;\n"],"sourceRoot":""}