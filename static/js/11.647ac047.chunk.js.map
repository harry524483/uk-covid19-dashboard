{"version":3,"sources":["utils/formatNumber.ts","services/getLastUpdatedDate.ts","services/getCovidData.ts","reducers/initialState.ts","reducers/dashboard.ts","reducers/actionTypes.ts","hooks/useDashboardApiRequest.ts","components/Dashboard.tsx","constants/DateRange.ts"],"names":["value","toLocaleString","getLastUpdatedDate","a","axios","get","response","data","structure","date","name","cases","daily","cumulative","deaths","tests","pillarOne","pillarTwo","pillarThree","pillarFour","hospital","dailyAdmissions","totalAdmissions","ventilatorBeds","hospitalCases","getCovidData","filters","latestByClause","latestBy","apiParams","join","JSON","stringify","encodedParams","encodeURI","console","log","url","initialState","loading","lastUpdatedAt","error","nationDailyRecords","overview","nationNewCases","nationNewDeaths","regionalTotalCases","hospitalRecords","addAllTests","createNationDailyRecords","nationData","latestDate","todayNationData","filter","yesterday","moment","subtract","format","yesterdayNationData","map","yesterdayData","find","item","align","formatNumber","delta","createHospitalDailyRecords","nationDailyData","createDailyOverview","totalCases","dailyCases","dailyDeaths","totalDeaths","createNationNewCases","reverse","createNationNewDeaths","createRegionalTotalCases","regionalData","dashboard","state","type","payload","nationOverview","dailyRegionData","nationDailyOverview","useDashboardApiRequest","useReducer","dashboardReducer","dispatch","fetchDashboardData","useCallback","undefined","Promise","all","message","GeoChart","lazy","GeoLegend","FilterButtonGroup","NationDailyRecords","Stats","NewCasesChart","DailyDeathsChart","Dashboard","useState","DateRange","OneMonth","chartDateRange","setChartDateRange","useEffect","trail","useTrail","from","transform","opacity","config","mass","tension","friction","className","CircularProgress","Grid","container","spacing","justify","xs","sm","md","fallback","div","style","h2","minHeight","newCases","dateRange","newDeaths","onDateRangeChange"],"mappings":"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","file":"static/js/11.647ac047.chunk.js","sourcesContent":["export default (value: number | undefined) =>\n  value ? value.toLocaleString() : 0;\n","import axios from 'axios';\n\nconst getLastUpdatedDate = async () => {\n  const response = await axios.get(\n    'https://c19pub.azureedge.net/assets/dispatch/website_timestamp'\n  );\n\n  return response.data;\n};\n\nexport default getLastUpdatedDate;\n","import axios from 'axios';\n\nconst structure = {\n  date: 'date',\n  name: 'areaName',\n  cases: {\n    daily: 'newCasesByPublishDate',\n    cumulative: 'cumCasesByPublishDate',\n  },\n  deaths: {\n    daily: 'newDeaths28DaysByPublishDate',\n    cumulative: 'cumDeaths28DaysByPublishDate',\n  },\n  tests: {\n    pillarOne: 'newPillarOneTestsByPublishDate',\n    pillarTwo: 'newPillarTwoTestsByPublishDate',\n    pillarThree: 'newPillarThreeTestsByPublishDate',\n    pillarFour: 'newPillarFourTestsByPublishDate',\n  },\n  hospital: {\n    dailyAdmissions: 'newAdmissions',\n    totalAdmissions: 'cumAdmissions',\n    ventilatorBeds: 'covidOccupiedMVBeds',\n    hospitalCases: 'hospitalCases',\n  },\n};\n\nconst getCovidData = async (\n  filters: Array<string>,\n  latestByClause: string | null = null\n) => {\n  const latestBy = latestByClause ? `&${latestByClause}` : '';\n  const apiParams = `filters=${filters.join(\n      ';'\n    )}${latestBy}&structure=${JSON.stringify(structure)}`,\n    encodedParams = encodeURI(apiParams);\n\n  console.log('apiParams', apiParams);\n\n  const url = `https://api.coronavirus.data.gov.uk/v1/data?${encodedParams}`;\n\n  const response = await axios.get(url);\n\n  return response.data;\n};\n\nexport default getCovidData;\n","const initialState = {\n  loading: true,\n  lastUpdatedAt: null,\n  error: null,\n  nationDailyRecords: null,\n  overview: null,\n  nationNewCases: null,\n  nationNewDeaths: null,\n  regionalTotalCases: null,\n  hospitalRecords: null,\n};\n\nexport default initialState;\n","import moment from 'moment';\n\nimport initialState from './initialState';\nimport {\n  FETCH_DASHBOARD_DATA_SUCCESS,\n  FETCH_DASHBOARD_DATA_START,\n  FETCH_DASHBOARD_DATA_ERROR,\n} from './actionTypes';\nimport formatNumber from '../utils/formatNumber';\n\nconst addAllTests = (tests) =>\n  tests.pillarOne + tests.pillarTwo + tests.pillarThree + tests.pillarFour;\n\nconst createNationDailyRecords = (nationData, latestDate) => {\n  const todayNationData = nationData.filter(({ date }) => date === latestDate);\n\n  const yesterday = moment(latestDate).subtract(1, 'days').format('YYYY-MM-DD');\n  const yesterdayNationData = nationData.filter(\n    ({ date }) => date === yesterday\n  );\n\n  return todayNationData.map(({ name, cases, deaths, tests }) => {\n    const yesterdayData = yesterdayNationData.find(\n      (item) => item.name === name\n    );\n\n    return [\n      { value: name, align: 'left' },\n      {\n        value: formatNumber(cases.daily),\n        delta: formatNumber(cases.daily - yesterdayData.cases.daily),\n        align: 'right',\n      },\n      {\n        value: formatNumber(deaths.daily),\n        delta: formatNumber(deaths.daily - yesterdayData.deaths.daily),\n        align: 'right',\n      },\n      {\n        value: formatNumber(addAllTests(tests)),\n        delta: formatNumber(\n          addAllTests(tests) - addAllTests(yesterdayData.tests)\n        ),\n        align: 'right',\n      },\n    ];\n  });\n};\n\nconst createHospitalDailyRecords = (nationDailyData) =>\n  nationDailyData.map(({ name, hospital }) => [\n    name,\n    formatNumber(hospital.dailyAdmissions),\n    formatNumber(hospital.ventilatorBeds),\n    formatNumber(hospital.hospitalCases),\n  ]);\n\nconst createDailyOverview = ({ cases, deaths }) =>\n  ({\n    totalCases: cases.cumulative,\n    dailyCases: cases.daily,\n    dailyDeaths: deaths.daily,\n    totalDeaths: deaths.cumulative,\n  } as any);\n\nconst createNationNewCases = (nationData) =>\n  nationData\n    .map(({ date, cases }) => ({ date, cases: cases.daily }))\n    .reverse() as any;\n\nconst createNationNewDeaths = (nationData) =>\n  nationData\n    .map(({ date, deaths }) => ({ date, deaths: deaths.daily }))\n    .reverse() as any;\n\nconst createRegionalTotalCases = (regionalData) =>\n  regionalData.map(({ cases, name }) => ({\n    name,\n    totalCases: cases.cumulative,\n  }));\n\nconst dashboard = (state = initialState, { type, payload }) => {\n  if (type === FETCH_DASHBOARD_DATA_START) {\n    return { ...state, loading: true };\n  }\n\n  if (type === FETCH_DASHBOARD_DATA_SUCCESS) {\n    const { date, nationOverview, nationData, dailyRegionData } = payload;\n    const latestDate = moment(date).format('YYYY-MM-DD');\n\n    const nationDailyData = nationData.filter(\n      ({ date }) => date === latestDate\n    );\n\n    const nationDailyOverview = nationOverview.find(\n      ({ date }) => date === latestDate\n    );\n\n    return {\n      ...state,\n      loading: false,\n      lastUpdatedAt: date,\n      nationDailyRecords: createNationDailyRecords(nationData, latestDate),\n      overview: createDailyOverview(nationDailyOverview),\n      nationNewCases: createNationNewCases(nationOverview),\n      nationNewDeaths: createNationNewDeaths(nationOverview),\n      regionalTotalCases: createRegionalTotalCases([\n        ...nationDailyData,\n        ...dailyRegionData,\n      ]),\n      hospitalRecords: createHospitalDailyRecords(nationDailyData),\n    };\n  }\n\n  if (type === FETCH_DASHBOARD_DATA_ERROR) {\n    return { ...state, loading: false, error: payload };\n  }\n};\n\nexport default dashboard;\n","export const FETCH_DASHBOARD_DATA_START = 'FETCH_DASHBOARD_DATA_START';\nexport const FETCH_DASHBOARD_DATA_SUCCESS = 'FETCH_DASHBOARD_DATA_SUCCESS';\nexport const FETCH_DASHBOARD_DATA_ERROR = 'FETCH_DASHBOARD_DATA_ERROR';\n","import { useReducer, useCallback } from 'react';\n\nimport getLastUpdatedDate from '../services/getLastUpdatedDate';\nimport getCovidData from '../services/getCovidData';\nimport dashboardReducer from '../reducers/dashboard';\nimport initialState from '../reducers/initialState';\nimport {\n  FETCH_DASHBOARD_DATA_START,\n  FETCH_DASHBOARD_DATA_SUCCESS,\n  FETCH_DASHBOARD_DATA_ERROR,\n} from '../reducers/actionTypes';\n\nconst useDashboardApiRequest = () => {\n  const [state, dispatch] = useReducer(dashboardReducer, initialState);\n\n  const fetchDashboardData = useCallback(async () => {\n    dispatch({ type: FETCH_DASHBOARD_DATA_START, payload: undefined });\n\n    try {\n      const [\n        date,\n        nationOverview,\n        nationData,\n        dailyRegionData,\n      ] = await Promise.all([\n        getLastUpdatedDate(),\n        getCovidData(['areaType=overview']),\n        getCovidData(['areaType=nation']),\n        getCovidData(['areaType=region'], 'latestBy=cumCasesByPublishDate'),\n      ]);\n\n      dispatch({\n        type: FETCH_DASHBOARD_DATA_SUCCESS,\n        payload: {\n          date,\n          nationOverview: nationOverview.data,\n          nationData: nationData.data,\n          dailyRegionData: dailyRegionData.data,\n        },\n      });\n    } catch (error) {\n      dispatch({ type: FETCH_DASHBOARD_DATA_ERROR, payload: error.message });\n    }\n  }, []);\n\n  return { state, fetchDashboardData };\n};\n\nexport default useDashboardApiRequest;\n","import React, { useState, lazy, Suspense, useEffect } from 'react';\nimport { useTrail, animated } from 'react-spring';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Select from 'react-select';\n\nimport DateRange from '../constants/DateRange';\nimport useDashboardApiRequest from '../hooks/useDashboardApiRequest';\n\nconst GeoChart = lazy(() => import('./GeoChart'));\nconst GeoLegend = lazy(() => import('./GeoLegend'));\nconst FilterButtonGroup = lazy(() => import('./FilterButtonGroup'));\nconst PeopleHospitalised = lazy(() => import('./PeopleHospitalised'));\nconst DailyHospitalAdmissions = lazy(() => import('./DailyHospitalAdmissions'));\nconst NationDailyRecords = lazy(() => import('./NationDailyRecords'));\nconst VentilatorBeds = lazy(() => import('./VentilatorBeds'));\nconst Stats = lazy(() => import('./Stats'));\nconst NewCasesChart = lazy(() => import('./NewCasesChart'));\nconst DailyDeathsChart = lazy(() => import('./DailyDeathsChart'));\nconst HospitalDailyRecords = lazy(() => import('./HospitalDailyRecords'));\nconst DeathsByAgeChart = lazy(() => import('./DeathsByAgeChart'));\n\nconst options = [\n  { value: 'chocolate', label: 'Chocolate' },\n  { value: 'strawberry', label: 'Strawberry' },\n  { value: 'vanilla', label: 'Vanilla' },\n];\n\nconst Dashboard = () => {\n  const [chartDateRange, setChartDateRange] = useState(DateRange.OneMonth);\n\n  const { state, fetchDashboardData } = useDashboardApiRequest();\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  const trail = useTrail(5, {\n    from: { transform: 'translate3d(0, 30px, 0)', opacity: 0 },\n    transform: 'translate3d(0, 0px, 0)',\n    opacity: 1,\n    config: { mass: 1, tension: 2000, friction: 200 },\n  });\n\n  if (state && state.loading) {\n    return (\n      <div className=\"loading\">\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  console.log('state', state);\n\n  return (\n    <>\n      <div className=\"banner\">UK Covid19 Dashboard</div>\n      <div className=\"dashboard-grid\">\n        <Grid container spacing={3} justify=\"center\">\n          <Grid item xs={12} sm={12} md={4}>\n            <Suspense fallback={<div />}>\n              <Stats\n                overview={state?.overview}\n                lastUpdatedAt={state?.lastUpdatedAt}\n              />\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[1]}>\n                <NationDailyRecords\n                  nationDailyRecords={state?.nationDailyRecords}\n                />\n              </animated.div>\n            </Suspense>\n            {/* <Suspense fallback={<div />}>\n              <animated.div style={trail[1]}>\n                <DeathsByAgeChart />\n              </animated.div>\n            </Suspense> */}\n            {/* <Suspense fallback={<div />}>\n              <animated.div style={trail[2]}>\n                <HospitalDailyRecords\n                  hospitalRecords={state?.hospitalRecords}\n                />\n              </animated.div>\n            </Suspense> */}\n            {/* <Suspense fallback={<div />}>\n              <animated.div style={trail[1]}>\n                <DailyHospitalAdmissions\n                  data={dashboardData.hospital_admissions}\n                />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[2]}>\n                <PeopleHospitalised data={dashboardData.people_hospitalised} />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[3]}>\n                <VentilatorBeds data={dashboardData.ventilator_beds} />\n              </animated.div>\n            </Suspense> */}\n          </Grid>\n          <Grid item xs={12} sm={12} md={4}>\n            <animated.h2 className=\"map-title\" style={trail[4]}>\n              UK Map\n            </animated.h2>\n            <Suspense fallback={<div style={{ minHeight: '100vh' }} />}>\n              <animated.div style={trail[3]}>\n                <GeoChart regionalTotalCases={state?.regionalTotalCases} />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[3]}>\n                <GeoLegend />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[1]}>\n                <NewCasesChart\n                  newCases={state?.nationNewCases}\n                  dateRange={chartDateRange}\n                />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[2]}>\n                <DailyDeathsChart\n                  newDeaths={state?.nationNewDeaths}\n                  dateRange={chartDateRange}\n                />\n              </animated.div>\n            </Suspense>\n            <Suspense fallback={<div />}>\n              <animated.div style={trail[2]}>\n                <FilterButtonGroup\n                  chartDateRange={chartDateRange}\n                  onDateRangeChange={setChartDateRange}\n                />\n              </animated.div>\n            </Suspense>\n          </Grid>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;\n","enum DateRange {\n  Beginning = '1',\n  OneMonth = '2',\n  TwoWeeks = '3',\n}\n\nexport default DateRange;\n"],"sourceRoot":""}